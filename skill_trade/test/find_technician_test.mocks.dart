// Mocks generated by Mockito 5.4.4 from annotations
// in skill_trade/test/find_technician_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:skill_trade/domain/models/technician.dart' as _i5;
import 'package:skill_trade/infrastructure/data_sources/technician_remote_data_source.dart'
    as _i2;
import 'package:skill_trade/infrastructure/repositories/technician_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTechnicianRemoteDataSource_0 extends _i1.SmartFake
    implements _i2.TechnicianRemoteDataSource {
  _FakeTechnicianRemoteDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TechnicianRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTechnicianRepository extends _i1.Mock
    implements _i3.TechnicianRepository {
  MockTechnicianRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TechnicianRemoteDataSource get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakeTechnicianRemoteDataSource_0(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i2.TechnicianRemoteDataSource);

  @override
  _i4.Future<List<_i5.Technician>> getTechnicians() => (super.noSuchMethod(
        Invocation.method(
          #getTechnicians,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Technician>>.value(<_i5.Technician>[]),
      ) as _i4.Future<List<_i5.Technician>>);

  @override
  _i4.Future<List<_i5.Technician>> getPendingTechnicians() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingTechnicians,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Technician>>.value(<_i5.Technician>[]),
      ) as _i4.Future<List<_i5.Technician>>);

  @override
  _i4.Future<List<_i5.Technician>> getSuspendedTechnicians() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSuspendedTechnicians,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Technician>>.value(<_i5.Technician>[]),
      ) as _i4.Future<List<_i5.Technician>>);
}
